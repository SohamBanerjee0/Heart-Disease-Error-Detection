# -*- coding: utf-8 -*-
"""HeartDisease.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Dhi2e6bow4Jtl33L-nCDvq9y6OpD793_

IMPORTING THE DEPENDENCIES
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn import metrics
from xgboost import XGBRegressor
from sklearn import svm
import matplotlib.pyplot as pit
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier

"""DATA COLLECTION"""

heart_data = pd.read_csv('/content/heart.csv')

"""DATA PROCESSING"""

heart_data.shape

heart_data.describe()

heart_data.head()

heart_data.isnull().sum()

heart_data.value_counts('target')

X=heart_data.drop(columns = 'target',axis=1)
Y=heart_data['target']
print(X)
print(Y)

"""SPLITTING TRAINING AND TEST DATA"""

X_train, X_test, Y_train, Y_test= train_test_split(X, Y, test_size=0.2,stratify=Y,random_state=2)

"""CREATING THE MODELS"""

classifier1=svm.SVC(kernel='linear')
model1=XGBRegressor()
classifier2=KNeighborsClassifier(n_neighbors=5)
classifier3=RandomForestClassifier()
classifier4=DecisionTreeClassifier()

"""TRAINING THE MODELS"""

classifier1.fit(X_train, Y_train)
model1.fit(X_train, Y_train)
classifier2.fit(X_train, Y_train)
classifier3.fit(X_train, Y_train)
classifier4.fit(X_train, Y_train)

"""PREDICTION ON TRAINING DATA"""

pred1=classifier1.predict(X_train)
pred2=model1.predict(X_train)
pred3=classifier2.predict(X_train)
pred4=classifier3.predict(X_train)
pred5=classifier4.predict(X_train)

print(pred1)
print(pred2)
print(pred3)
print(pred4)
print(pred5)

"""PREDICTION ON TESTING DATA"""

tpred1=classifier1.predict(X_test)
tpred2=model1.predict(X_test)
tpred3=classifier2.predict(X_test)
tpred4=classifier3.predict(X_test)
tpred5=classifier4.predict(X_test)

print(tpred1)
print(tpred2)
print(tpred3)
print(tpred4)
print(tpred5)

"""ERROR CALCULATION"""

def error_calc(X, Y): 
  score_1=metrics.r2_score(X, Y)
  score_2=metrics.mean_absolute_error(X, Y)
  #r2_score=coefficient of determination 0.9+ (best score)
  #MSE=lower the better
  return score_2
  #returns MSE

error1=error_calc(Y_test,tpred1)
error2=error_calc(Y_test,tpred2)
error3=error_calc(Y_test,tpred3)
error4=error_calc(Y_test,tpred4)
error5=error_calc(Y_test,tpred5)

"""DISPLAY ERROR OF EACH MODEL"""

print('Error for:')
print("Support Vector Machine:",error1)
print("XGBRegressor:",error2)
print("KNN:",error3)
print("Random Forest:",error4)
print("Decision Tree Classifier:",error5)